from .. import outputs
import io

@outputs.output('sys')
@outputs.output('box')
class LinkerScriptOutput(outputs.Output):
    """
    Name of file to target for the linkerscript.
    """
    __argname__ = "linkerscript"
    __arghelp__ = __doc__

    def __init__(self, sys, box, path):
        self._decls = []
        self._memories = []
        self._sections = []
        super().__init__(sys, box, path)

    def append_decl(self, fmt=None, **kwargs):
        outf = self.mkfield(**kwargs)
        self._decls.append(outf)
        if fmt is not None:
            outf.write(fmt)
        return outf

    def append_memory(self, fmt=None, **kwargs):
        outf = self.mkfield(**kwargs)
        self._memories.append(outf)
        if fmt is not None:
            outf.write(fmt)
        return outf

    def append_section(self, fmt=None, **kwargs):
        outf = self.mkfield(**kwargs)
        self._sections.append(outf)
        if fmt is not None:
            outf.write(fmt)
        return outf

    def build(self, outf):
        outf.write('/***** AUTOGENERATED *****/\n')
        outf.write('\n')
        if self._decls:
            for decl in self._decls:
                outf.write(decl.getvalue())
                outf.write('\n')
            outf.write('\n')
        if self._memories:
            outf.write('MEMORY {\n')
            for memory in self._memories:
                for line in memory.getvalue().strip().split('\n'):
                    outf.write(4*' ' + line + '\n')
            outf.write('}\n')
            outf.write('\n')
        if self._sections:
            outf.write('SECTIONS {\n')
            for i, section in enumerate(self._sections):
                for line in section.getvalue().strip().split('\n'):
                    outf.write(4*' ' + line + '\n')
                if i < len(self._sections)-1:
                    outf.write('\n')
            outf.write('}\n')
            outf.write('\n')

@outputs.output('sys')
@outputs.output('box')
class PartialLinkerScriptOutput(LinkerScriptOutput):
    """
    Name of file to target for a partial linkerscript. This is the minimal
    additions needed for a bento box and should be imported into a traditional
    linkerscript to handle the normal program sections.
    """
    __argname__ = "partiallinkerscript"
    __arghelp__ = __doc__
