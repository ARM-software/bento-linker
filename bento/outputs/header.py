from .. import outputs
import io

@outputs.output('sys')
@outputs.output('box')
class HeaderOutput(outputs.Output):
    """
    Name of header file to generate containing the imported functions.
    """
    __argname__ = "header"
    __arghelp__ = __doc__

    def __init__(self, path):
        self.path = path
        self._includes = []
        self._decls = []

    def append_include(self, include):
        if not include.startswith('"') and not include.startswith('<'):
            include = '"%s"' % include
        if include not in self._includes:
            self._includes.append(include)

    def append_decl(self, decl=None):
        outf = io.StringIO()
        self._decls.append(outf)
        if decl is not None:
            outf.write(decl)
        return outf

    def build(self, sys, box, outf):
        outf.write('////// AUTOGENERATED //////\n')
        gaurd = '__BOX_%s_H' % box.name.upper() if box else '__BOX_H'
        outf.write('#ifndef %s\n' % gaurd)
        outf.write('#define %s\n' % gaurd)
        for include in self._includes:
            outf.write('#include %s\n' % include)
        outf.write('\n')
        for decl in self._decls:
            outf.write(decl.getvalue())
            outf.write('\n')
        outf.write('#endif\n')
