from .. import outputs
import io

@outputs.output('sys')
@outputs.output('box')
class HeaderOutput(outputs.Output):
    """
    Name of header file to generate containing the imported functions.
    """
    __argname__ = "header_glue"
    __arghelp__ = __doc__

    def __init__(self, sys, box, path):
        self._includes = []
        self._decls = []
        super().__init__(sys, box, path)

        if box:
            self.format(gaurd='__BOX_%s_H' % box.name.upper())
        else:
            self.format(gaurd='__BOX_H')

    def append_include(self, fmt=None, **kwargs):
        include = fmt % self.mkformat(**kwargs)
        if not include.startswith('"') and not include.startswith('<'):
            include = '"%s"' % include
        if include not in self._includes:
            self._includes.append(include)

    def append_decl(self, fmt=None, **kwargs):
        outf = self.mkfield(**kwargs)
        self._decls.append(outf)
        if fmt is not None:
            outf.write(fmt)
        return outf

    def build(self, outf):
        outf.write('////// AUTOGENERATED //////\n')
        outf.write('#ifndef %(gaurd)s\n' % self.mkformat())
        outf.write('#define %(gaurd)s\n' % self.mkformat())
        for include in self._includes:
            outf.write('#include %s\n' % include)
        outf.write('\n')
        for decl in self._decls:
            outf.write(decl.getvalue())
            outf.write('\n')
        outf.write('#endif\n')
