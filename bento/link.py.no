import itertools as it

class LinkError(Exception):
    pass

class Link:
    """
    Wrapper around a function representing the link point between
    imports/exports.
    """
    def __init__(self, name=None, type=None, export=None, import_=None):
        self.name = name or (
            export.name if export else
            import_.name if import_ else
            None)
        self.export = export
        self.imports = [import_] if import_ else []

    def __lt__(self, other):
        return self.name < other.name

    def iscompatible(self, other):
        if self.export:
            return self.export.iscompatible(other)
        elif len(self.imports) > 0:
            return self.imports[0].iscompatible(other)
        else:
            return True

class Linker:
    """
    High-level linker that is responsible for connecting box
    imports/exports.
    """
    def __init__(self):
        self._links = {}

    def export(self, export, source='?', gc=False):
        export.source = source # TODO do this elsewhere?

        if export.name not in self._links:
            self._links[export.name] = Link(export=export)
        else:
            if self._links[export.name].export:
                raise LinkError(
                    "Conflicting exports for %s:\n"
                    "export.%s = %s in %s\n"
                    "export.%s = %s in %s" % (
                    export.name,
                    self._links[export.name].export.source,
                    self._links[export.name].name,
                    self._links[export.name].export,
                    export.source, export.name, export))
            else:
                self._links[export.name].export = export

    def import_(self, import_, source='?'):
        import_.source = source # TODO do this elsewhere?

        if import_.name not in self._links:
            self._links[import_.name] = Link(import_=import_)
        else:
            self._links[name].imports.append(import_)

    def link(self):
        for link in self._links.values():
            if not link.export:
                raise LinkError(
                    "No export for %r:\n%s" % (
                    link.name, '\n'.join(
                        "import.%s = %s in %s" % (f.name, f, f.source)
                        for f in link.imports)))
            elif any(not f.iscompatible(link.export) for f in link.imports):
                raise LinkError(
                    "Incompatible import/export for %r:\n%s" % (
                    link.name, '\n'.join(
                        "%s.%s = %s in %s" % (kind, f.name, f, f.source)
                        for kind, f in it.chain(
                            [('export', link.export)],
                            zip(it.repeat('import'), link.imports)))))
