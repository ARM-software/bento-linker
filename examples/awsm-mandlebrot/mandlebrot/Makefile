###### BENTO-BOX AUTOGENERATED ######

TARGET           ?= mandlebrot.elf

DEBUG            ?= 0
LTO              ?= 1
ASSERTS          ?= 1
CC               = arm-none-eabi-gcc
OBJCOPY          = arm-none-eabi-objcopy
OBJDUMP          = arm-none-eabi-objdump
AR               = arm-none-eabi-ar
SIZE             = arm-none-eabi-size
GDB              = arm-none-eabi-gdb
GDBADDR          ?= localhost
GDBPORT          ?= 3333
TTY              ?= $(firstword $(wildcard /dev/ttyACM* /dev/ttyUSB*))
BAUD             ?= 115200
WASMCC           = ../wasi-sdk/bin/clang
WASMSYSROOT      ?= ../wasi-sdk/share/wasi-sysroot
WASMSTRIP        = ../wabt/bin/wasm-strip
WASMOBJDUMP      = ../wabt/bin/wasm-objdump
WASMWASM2WAT     = ../wabt/bin/wasm2wat
WASMWAT2WASM     = ../wabt/bin/wat2wasm
AWSM             = ../awsm/target/debug/awsm
LLVMCC           = clang
LLVMSYSROOT      ?= $(shell $(CC) -print-sysroot)
LLVMLINK         = llvm-link
LLVMOPT          = opt
LLVMDIS          = llvm-dis

SRC += runtime
INC += runtime
LIB += m
LIB += c
LIB += gcc
LIB += nosys
WASMSRC += .
WASMINC += .
LLVMSRC += runtime
LLVMINC += runtime

OBJ := $(patsubst %.c,%.o,$(wildcard $(patsubst %,%/*.c,$(SRC))))
OBJ += $(patsubst %.s,%.o,$(wildcard $(patsubst %,%/*.s,$(SRC))))
OBJ += $(patsubst %.S,%.o,$(wildcard $(patsubst %,%/*.S,$(SRC))))
DEP := $(patsubst %.o,%.d,$(OBJ))
LDSCRIPT := $(firstword $(wildcard $(patsubst %,%/*.ld,$(SRC))))
WASMOBJ := $(patsubst %.c,%.wo,$(wildcard $(patsubst %,%/*.c,$(WASMSRC))))
WASMOBJ += $(patsubst %.s,%.wo,$(wildcard $(patsubst %,%/*.s,$(WASMSRC))))
WASMOBJ += $(patsubst %.S,%.wo,$(wildcard $(patsubst %,%/*.S,$(WASMSRC))))
DEP += $(patsubst %.wo,%.d,$(WASMOBJ))
LLVMOBJ := $(patsubst %.c,%.bc,$(wildcard $(patsubst %,%/*.c,$(LLVMSRC))))
LLVMOBJ += $(patsubst %.s,%.bc,$(wildcard $(patsubst %,%/*.s,$(LLVMSRC))))
LLVMOBJ += $(patsubst %.S,%.bc,$(wildcard $(patsubst %,%/*.S,$(LLVMSRC))))
DEP += $(patsubst %.bc,%.d,$(LLVMOBJ))

override CFLAGS += -g
ifneq ($(DEBUG),0)
override CFLAGS += -O0
else
ifeq ($(ASSERTS),0)
override CFLAGS += -DNDEBUG
endif
override CFLAGS += -Os
ifneq ($(LTO),0)
override CFLAGS += -flto
endif
endif
override CFLAGS += -mthumb
override CFLAGS += -mcpu=cortex-m4
override CFLAGS += -mfpu=fpv4-sp-d16
override CFLAGS += -mfloat-abi=softfp
override CFLAGS += -std=c99
override CFLAGS += -Wall -Wno-format
override CFLAGS += -fno-common
override CFLAGS += -ffunction-sections
override CFLAGS += -fdata-sections
override CFLAGS += -ffreestanding
override CFLAGS += -fno-builtin
override CFLAGS += -fshort-enums
override CFLAGS += $(patsubst %,-I%,$(INC))

ifneq ($(DEBUG),0)
override WASMCFLAGS += -g
override WASMCFLAGS += -Oz
else
ifeq ($(ASSERTS),0)
override WASMCFLAGS += -DNDEBUG
endif
override WASMCFLAGS += -Oz
ifneq ($(LTO),0)
override WASMCFLAGS += -flto
endif
endif
override WASMCFLAGS += --target=wasm32-wasi
override WASMCFLAGS += --sysroot=$(WASMSYSROOT)
override WASMCFLAGS += -mcpu=mvp
override WASMCFLAGS += -fvisibility=hidden
override WASMCFLAGS += -std=c99
override WASMCFLAGS += -Wall -Wno-format
override WASMCFLAGS += -fno-common
override WASMCFLAGS += -ffunction-sections
override WASMCFLAGS += -fdata-sections
override WASMCFLAGS += -ffreestanding
override WASMCFLAGS += -fno-builtin
override WASMCFLAGS += $(patsubst %,-I%,$(WASMINC))

override AWSMFLAGS += --target=thumbv7em-v7m-none-gnueabi

ifneq ($(DEBUG),0)
# note we need the -always-inline pass otherwise the
# resulting binary is unusably large
override LLVMOPTFLAGS += -O1
else
override LLVMOPTFLAGS += -Oz
endif

override LLVMCFLAGS += -g
ifneq ($(DEBUG),0)
# note we need the -always-inline pass otherwise the
# resulting binary is unusably large
override LLVMCFLAGS += -O1
else
ifeq ($(ASSERTS),0)
override LLVMCFLAGS += -DNDEBUG
endif
override LLVMCFLAGS += -Oz
ifneq ($(LTO),0)
override LLVMCFLAGS += -flto
endif
endif
override LLVMCFLAGS += -mthumb
override LLVMCFLAGS += -mcpu=cortex-m4
override LLVMCFLAGS += -mfpu=fpv4-sp-d16
override LLVMCFLAGS += -mfloat-abi=softfp
override LLVMCFLAGS += --target=thumbv7em-v7m-none-gnueabi
override LLVMCFLAGS += --sysroot=$(LLVMSYSROOT)
override LLVMCFLAGS += -I$(LLVMSYSROOT)/include
override LLVMCFLAGS += -std=c99
override LLVMCFLAGS += -Wall -Wno-format
override LLVMCFLAGS += -fno-common
override LLVMCFLAGS += -ffunction-sections
override LLVMCFLAGS += -fdata-sections
override LLVMCFLAGS += -ffreestanding
override LLVMCFLAGS += -fno-builtin
override LLVMCFLAGS += -fshort-enums
override LLVMCFLAGS += $(patsubst %,-I%,$(LLVMINC))

override ASMFLAGS += $(CFLAGS)

override LDFLAGS += $(CFLAGS)
override LDFLAGS += $(addprefix -T,$(LDSCRIPT))
override LDFLAGS += $(patsubst %,-L%,$(SRC))
override LDFLAGS += -Wl,--start-group $(patsubst %,-l%,$(LIB)) -Wl,--end-group
override LDFLAGS += -static
override LDFLAGS += --specs=nano.specs
override LDFLAGS += --specs=nosys.specs
override LDFLAGS += -Wl,--gc-sections
override LDFLAGS += -Wl,-static
override LDFLAGS += -Wl,-z,muldefs
override WASMLDFLAGS += $(WASMCFLAGS)
override WASMLDFLAGS += $(patsubst %,-L%,$(WASMSRC))
override WASMLDFLAGS += $(patsubst %,-l%,$(WASMLIB))
override WASMLDFLAGS += -Wl,--gc-sections
override WASMLDFLAGS += -Wl,--no-entry
override WASMLDFLAGS += -Wl,--allow-undefined
override WASMLDFLAGS += -Wl,--stack-first

### replace-me-heap glue ###
override WASMLDFLAGS += -Wl,--wrap,malloc
override WASMLDFLAGS += -Wl,--wrap,free
override WASMLDFLAGS += -Wl,--wrap,calloc
override WASMLDFLAGS += -Wl,--wrap,realloc

### __box_abort glue ###
override LDFLAGS += -Wl,--wrap,abort
override LDFLAGS += -Wl,--wrap,exit
override WASMLDFLAGS += -Wl,--wrap,abort
override WASMLDFLAGS += -Wl,--wrap,exit

### __box_write glue ###
override LDFLAGS += -Wl,--wrap,printf
override LDFLAGS += -Wl,--wrap,vprintf
override LDFLAGS += -Wl,--wrap,fprintf
override LDFLAGS += -Wl,--wrap,vfprintf
override LDFLAGS += -Wl,--wrap,fflush
override WASMLDFLAGS += -Wl,--wrap,printf
override WASMLDFLAGS += -Wl,--wrap,vprintf
override WASMLDFLAGS += -Wl,--wrap,fprintf
override WASMLDFLAGS += -Wl,--wrap,vfprintf
override WASMLDFLAGS += -Wl,--wrap,writev
override WASMLDFLAGS += -Wl,--wrap,fflush

### wasm stack configuration ###
override WASMLDFLAGS += -Wl,-z,stack-size=16384
override WASMLDFLAGS += -Wl,--export=mandlebrot

# target rule
$(TARGET): $(TARGET:.elf=.awsm.o) $(LDSCRIPT)
	$(CC) $< $(filter-out -flto,$(LDFLAGS)) -o $@

$(TARGET:.elf=.awsm.o): $(TARGET:.elf=.awsm.bc)
	$(LLVMCC) -c $< $(filter-out -flto -I%,$(LLVMCFLAGS)) -o $@

$(TARGET:.elf=.awsm.bc): $(TARGET:.elf=.bc) $(LLVMOBJ)
	$(LLVMLINK) $^ -o $@
	$(LLVMOPT) $(LLVMOPTFLAGS) $@ -o $@

$(TARGET:.elf=.bc): $(TARGET:.elf=.wasm.stripped)
	$(AWSM) $(AWSMFLAGS) $< -o $@

$(TARGET:.elf=.wasm): $(WASMOBJ) $(WASMCRATES) $(WASMBOXES)
	$(WASMCC) $(WASMOBJ) $(WASMBOXES) $(WASMLDFLAGS) -o $@

# a .box is a .elf containing a single section for each loadable memory region
%.box: %.elf %.box.flash
	$(strip $(OBJCOPY) $< $@ \
	    -I binary \
	    -O elf32-littlearm \
	    -B arm \
	    --strip-all \
	    --remove-section=* \
	    --add-section .box.mandlebrot.flash=$(word 2,$^) \
	    --change-section-address .box.mandlebrot.flash=0x000f8000 \
	    --set-section-flags .box.mandlebrot.flash=contents,alloc,load,readonly,data)

%.box.flash: %.elf
	$(strip $(OBJCOPY) $< $@ \
	    --only-section .text \
	    --only-section .data \
	    --only-section .jumptable \
	    -O binary)

### rules ###

# default rule
.PHONY: all build
all build: $(TARGET)

# computing size size is a bit complicated as each .elf includes its boxes, we
# want independent sizes.
.PHONY: size
size: $(TARGET:.wasm=.elf) $(BOXES)
	$(SIZE) $<

.PHONY: debug
debug: $(TARGET:.wasm=.elf)
	echo '$$qRcmd,68616c74#fc' | nc -N $(GDBADDR) $(GDBPORT) && echo # halt
	$(strip $(GDB) $< \
	    -ex "target remote $(GDBADDR):$(GDBPORT)")
	echo '$$qRcmd,676f#2c' | nc -N $(GDBADDR) $(GDBPORT) && echo # go

.PHONY: flash
flash: $(TARGET:.wasm=.elf)
	echo '$$qRcmd,68616c74#fc' | nc -N $(GDBADDR) $(GDBPORT) && echo # halt
	$(strip $(GDB) $< \
	    -ex "target remote $(GDBADDR):$(GDBPORT)" \
	    -ex "load" \
	    -ex "monitor reset" \
	    -batch)

.PHONY: reset
reset:
	echo '$$qRcmd,7265736574#37' | nc -N $(GDBADDR) $(GDBPORT) && echo # reset
	echo '$$qRcmd,676f#2c' | nc -N $(GDBADDR) $(GDBPORT) && echo # go

.PHONY: cat
cat:
	stty -F $(TTY) sane nl $(BAUD)
	cat $(TTY)

.PHONY: tags
tags:
	$(strip ctags --totals \
	    $(shell find -H $(INC) -name '*.h') \
	    $(wildcard $(patsubst %,%/*.c,$(SRC))) \
	    $(wildcard $(patsubst %,%/*.s,$(SRC))) \
	    $(wildcard $(patsubst %,%/*.S,$(SRC))))

# header dependencies
-include $(DEP)

%.bin: %.elf
	$(OBJCOPY) -O binary $< $@

%.o: %.c
	$(CC) -c -MMD -MP $(CFLAGS) $< -o $@

%.s: %.c
	$(CC) -S -MMD -MP $(CFLAGS) $< -o $@

%.o: %.s
	$(CC) -c -MMD -MP $(ASMFLAGS) $< -o $@

%.o: %.S
	$(CC) -c -MMD -MP $(ASMFLAGS) $< -o $@

%.wo: %.c
	$(WASMCC) -c -MMD -MP $(WASMCFLAGS) $< -o $@

%.wo: %.wat
	$(WASMWAT2WASM) $< -o $@

%.wat: %.wasm
	$(WASMWASM2WAT) $< -o $@

%.wat: %.wo
	$(WASMWASM2WAT) $< -o $@

%.wasm.stripped: %.wasm
	# remove zero data elements, you would expect this
	# from lld but it's not currently supported
	$(WASMWASM2WAT) $< -o $@
	sed -i 's/(data[^"]*"\(\\00\)*")//g' $@
	$(WASMWAT2WASM) $@ -o $@
	# and remove symbols
	$(WASMSTRIP) $@

%.prefixed: %
	$(strip python3 -c 'import sys, struct; \
	    d=open(sys.argv[1], "rb").read(); \
	    sys.stdout.buffer.write(struct.pack("<I", len(d))); \
	    sys.stdout.buffer.write(d);' $< > $@)

%.bc: %.c
	$(LLVMCC) -c -emit-llvm -MMD -MP $(LLVMCFLAGS) $< -o $@

%.ll: %.bc
	$(LLVMDIS) $< -o $@

.PHONY: clean
clean:
	rm -f $(TARGET) $(BOXES)
	rm -f $(OBJ)
	rm -f $(DEP)
	rm -f $(TARGET:.wasm=.elf) $(WASMOBJ)
	rm -f $(TARGET:.elf=.bc) $(TARGET:.elf=.wasm) $(TARGET:.elf=.awsm.bc) $(TARGET:.elf=.awsm.o)
	rm -f $(LLVMOBJ)

