###### BENTO-BOX AUTOGENERATED ######

TARGET           ?= sys.elf

DEBUG            ?= 0
LTO              ?= 1
CC               = arm-none-eabi-gcc
CARGO            = cargo
OBJCOPY          = arm-none-eabi-objcopy
OBJDUMP          = arm-none-eabi-objdump
AR               = arm-none-eabi-ar
SIZE             = arm-none-eabi-size
GDB              = arm-none-eabi-gdb
GDBADDR          ?= localhost
GDBPORT          ?= 3333
TTY              ?= $(firstword $(wildcard /dev/ttyACM* /dev/ttyUSB*))
BAUD             ?= 115200

SRC += .
SRC += nrfx/drivers/src
INC += .
INC += nrfx
INC += cmsis
INC += nrfx/drivers/include
INC += nrfx/mdk
INC += nrfx/templates
LIB += m
LIB += c
LIB += gcc
LIB += nosys

CARGOTOML2ARCHIVE = $(foreach lib,$\
    $(shell $(CARGO) metadata $\
        --manifest-path=$(1) $\
        --format-version=1 --no-deps $\
        | jq -r '.packages|.[].name|gsub("-";"_")'),$\
    $(patsubst %/Cargo.toml,%,$(1))/$\
        target/thumbv7em-none-eabi/$\
        $(if $(filter-out 0,$(DEBUG)),debug,release)/$\
        lib$(lib).a)

CARGOTOMLS := $(wildcard $(patsubst %,%/Cargo.toml,$(SRC)))

OBJ := $(patsubst %.c,%.o,$(wildcard $(patsubst %,%/*.c,$(SRC))))
OBJ += $(patsubst %.s,%.o,$(wildcard $(patsubst %,%/*.s,$(SRC))))
OBJ += $(patsubst %.S,%.o,$(wildcard $(patsubst %,%/*.S,$(SRC))))
DEP := $(patsubst %.o,%.d,$(OBJ))
LDSCRIPT := $(firstword $(wildcard $(patsubst %,%/*.ld,$(SRC))))
ARCHIVES := $(wildcard $(patsubst %,%/lib*.a,$(SRC)))
ARCHIVES += $(foreach toml,$(CARGOTOMLS),$(call CARGOTOML2ARCHIVE,$(toml)))
LIB += $(patsubst lib%.a,%,$(notdir $(ARCHIVES)))
BOXES += alicebox/alicebox.box
BOXES += bobbox/bobbox.box
BOXES += tlsbox/tlsbox.box

ifneq ($(DEBUG),0)
override CFLAGS += -DDEBUG
override CFLAGS += -g
override CFLAGS += -O0
else
override CFLAGS += -DNDEBUG
override CFLAGS += -Os
ifneq ($(LTO),0)
override CFLAGS += -flto
endif
endif
override CFLAGS += -mthumb
override CFLAGS += -mcpu=cortex-m4
override CFLAGS += -mfpu=fpv4-sp-d16
override CFLAGS += -mfloat-abi=softfp
override CFLAGS += -std=c99
override CFLAGS += -Wall -Wno-format
override CFLAGS += -fno-common
override CFLAGS += -ffunction-sections
override CFLAGS += -fdata-sections
override CFLAGS += -ffreestanding
override CFLAGS += -fno-builtin
override CFLAGS += $(patsubst %,-I%,$(INC))

override CARGOFLAGS += --target=thumbv7em-none-eabi
ifeq ($(DEBUG),0)
override CARGOFLAGS += --release
endif

override ASMFLAGS += $(CFLAGS)

override LDFLAGS += $(CFLAGS)
override LDFLAGS += -T$(LDSCRIPT)
override LDFLAGS += $(patsubst %,-L%,$(dir $(ARCHIVES)))
override LDFLAGS += -Wl,--start-group $(patsubst %,-l%,$(LIB)) -Wl,--end-group
override LDFLAGS += -static
override LDFLAGS += --specs=nano.specs
override LDFLAGS += --specs=nosys.specs
override LDFLAGS += -Wl,--gc-sections
override LDFLAGS += -Wl,-static
override LDFLAGS += -Wl,-z,muldefs

### __box_abort glue ###
override LDFLAGS += -Wl,--wrap,abort
override LDFLAGS += -Wl,--wrap,exit

### __box_write glue ###
override LDFLAGS += -Wl,--wrap,printf
override LDFLAGS += -Wl,--wrap,vprintf
override LDFLAGS += -Wl,--wrap,fprintf
override LDFLAGS += -Wl,--wrap,vfprintf
override LDFLAGS += -Wl,--wrap,fflush

### user provided flags ###

override CFLAGS += -DNRF52840_XXAA='1'
override CFLAGS += -DNRFX_UARTE0_ENABLED='1'
override CFLAGS += -DNRFX_UARTE_ENABLED='1'

# target rule
$(TARGET): $(OBJ) $(BOXES) $(ARCHIVES) $(LDSCRIPT)
	$(CC) $(OBJ) $(BOXES) $(LDFLAGS) -o $@

# a .box is a .elf containing a single section for each loadable memory region
%.box: %.elf %.box.flash1 %.box.flash2 %.box.box.alicebox.flash %.box.box.bobbox.flash %.box.box.tlsbox.flash
	$(strip $(OBJCOPY) $< $@ \
	    -I binary \
	    -O elf32-littlearm \
	    -B arm \
	    --strip-all \
	    --remove-section=* \
	    --add-section .box.sys.flash1=$(word 2,$^) \
	    --change-section-address .box.sys.flash1=0x00000000 \
	    --set-section-flags .box.sys.flash1=contents,alloc,load,readonly,data \
	    --add-section .box.sys.flash2=$(word 3,$^) \
	    --change-section-address .box.sys.flash2=0x000e0000 \
	    --set-section-flags .box.sys.flash2=contents,alloc,load,readonly,data \
	    --add-section .box.sys.box.alicebox.flash=$(word 4,$^) \
	    --change-section-address .box.sys.box.alicebox.flash=0x000fe000 \
	    --set-section-flags .box.sys.box.alicebox.flash=contents,alloc,load,readonly,data \
	    --add-section .box.sys.box.bobbox.flash=$(word 5,$^) \
	    --change-section-address .box.sys.box.bobbox.flash=0x000fc000 \
	    --set-section-flags .box.sys.box.bobbox.flash=contents,alloc,load,readonly,data \
	    --add-section .box.sys.box.tlsbox.flash=$(word 6,$^) \
	    --change-section-address .box.sys.box.tlsbox.flash=0x000c0000 \
	    --set-section-flags .box.sys.box.tlsbox.flash=contents,alloc,load,readonly,data)

%.box.flash1: %.elf
	$(strip $(OBJCOPY) $< $@ \
	    --only-section .text \
	    --only-section .data \
	    --only-section .isr_vector \
	    -O binary)

%.box.flash2: %.elf
	$(strip $(OBJCOPY) $< $@ \
	    -O binary)

%.box.box.alicebox.flash: %.elf
	$(strip $(OBJCOPY) $< $@ \
	    --only-section .box.alicebox.flash \
	    -O binary)

%.box.box.bobbox.flash: %.elf
	$(strip $(OBJCOPY) $< $@ \
	    --only-section .box.bobbox.flash \
	    -O binary)

%.box.box.tlsbox.flash: %.elf
	$(strip $(OBJCOPY) $< $@ \
	    --only-section .box.tlsbox.flash \
	    -O binary)

### rules ###

# default rule
.PHONY: all build
all build: $(TARGET)

# computing size size is a bit complicated as each .elf includes its boxes, we
# want independent sizes.
.PHONY: size
size: $(TARGET) $(BOXES)
	$(strip ( $(SIZE) $^ ; \
	    $(MAKE) -s --no-print-directory -C alicebox size ; \
	    $(MAKE) -s --no-print-directory -C bobbox size ; \
	    $(MAKE) -s --no-print-directory -C tlsbox size ) | awk '\
	        function f(t, d, b, n) { \
	            printf "%7d %7d %7d %7d %7x %s\n", \
	            t, d, b, t+d+b, t+d+b, n} \
	        NR==1 {print} \
	        NR==2 {t=$$1; d=$$2; b=$$3; n=$$6} \
	        NR>=3 && NR<6 {bt+=$$1} \
	        NR>=6 && /^([ \t]+[0-9]+){3,}/ && !/TOTALS/ { \
	            l[NR-6]=$$0; bd+=$$2; bb+=$$3} \
	        END {f(t-bt, d, b, n)} \
	        END {for (i in l) print l[i]} \
	        END {f(t, d, b+bd+bb, "(TOTALS)")}')

.PHONY: debug
debug: $(TARGET)
	echo '$$qRcmd,68616c74#fc' | nc -N $(GDBADDR) $(GDBPORT) && echo # halt
	$(strip $(GDB) $< \
	    -ex "target remote $(GDBADDR):$(GDBPORT)")
	echo '$$qRcmd,676f#2c' | nc -N $(GDBADDR) $(GDBPORT) && echo # go

.PHONY: flash
flash: $(TARGET)
	echo '$$qRcmd,68616c74#fc' | nc -N $(GDBADDR) $(GDBPORT) && echo # halt
	$(strip $(GDB) $< \
	    -ex "target remote $(GDBADDR):$(GDBPORT)" \
	    -ex "load" \
	    -ex "monitor reset" \
	    -batch)

.PHONY: reset
reset:
	echo '$$qRcmd,7265736574#37' | nc -N $(GDBADDR) $(GDBPORT) && echo # reset
	echo '$$qRcmd,676f#2c' | nc -N $(GDBADDR) $(GDBPORT) && echo # go

.PHONY: cat
cat:
	stty -F $(TTY) sane nl $(BAUD)
	cat $(TTY)

.PHONY: tags
tags:
	$(strip ctags \
	    $(shell find $(INC) -name '*.h') \
	    $(wildcard $(patsubst %,%/*.c,$(SRC))) \
	    $(wildcard $(patsubst %,%/*.s,$(SRC))) \
	    $(wildcard $(patsubst %,%/*.S,$(SRC))))

.PHONY: $(shell make -s -C alicebox alicebox.box -q || echo alicebox/alicebox.box)
alicebox/alicebox.box:
	@echo "=============== make -C alicebox ==============="
	$(MAKE) --no-print-directory -C alicebox alicebox.box
	@echo "================================================"

.PHONY: $(shell make -s -C bobbox bobbox.box -q || echo bobbox/bobbox.box)
bobbox/bobbox.box:
	@echo "================ make -C bobbox ================"
	$(MAKE) --no-print-directory -C bobbox bobbox.box
	@echo "================================================"

.PHONY: $(shell make -s -C tlsbox tlsbox.box -q || echo tlsbox/tlsbox.box)
tlsbox/tlsbox.box:
	@echo "================ make -C tlsbox ================"
	$(MAKE) --no-print-directory -C tlsbox tlsbox.box
	@echo "================================================"

# header dependencies
-include $(DEP)

define CARGORULE
.PHONY: $(toml)
$(call CARGOTOML2ARCHIVE,$(toml)): $(toml)
	$(CARGO) build --manifest-path=$$< $(CARGOFLAGS)
endef
$(foreach toml,$(CARGOTOMLS),$(eval $(CARGORULE)))

%.bin: %.elf
	$(OBJCOPY) -O binary $< $@

%.o: %.c
	$(CC) -c -MMD -MP $(CFLAGS) $< -o $@

%.s: %.c
	$(CC) -S -MMD -MP $(CFLAGS) $< -o $@

%.o: %.s
	$(CC) -c -MMD -MP $(ASMFLAGS) $< -o $@

%.o: %.S
	$(CC) -c -MMD -MP $(ASMFLAGS) $< -o $@

.PHONY: clean
clean:
	rm -f $(TARGET) $(BOXES)
	rm -f $(OBJ)
	rm -f $(DEP)
	$(foreach toml,$(CARGOTOMLS),$(CARGO) clean --manifest-path=$(toml))
	$(MAKE) -C alicebox clean
	$(MAKE) -C bobbox clean
	$(MAKE) -C tlsbox clean

